{"ast":null,"code":"var _jsxFileName = \"/Users/johnnynguyen/instagram-clone/src/auth.js\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport React from \"react\";\nimport defaultUserImage from \"./images/default-user-image.jpg\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { CREATE_USER } from \"./graphql/mutations\";\nconst provider = new firebase.auth.GoogleAuthProvider(); // Find these options in your Firebase console\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyCMW_qzquNAQxVRxO5_ERxqzb62OyIKfdk\",\n  authDomain: \"instagram-clone-588da.firebaseapp.com\",\n  databaseURL: \"https://instagram-clone-588da.firebaseio.com\",\n  projectId: \"instagram-clone-588da\",\n  storageBucket: \"instagram-clone-588da.appspot.com\",\n  messagingSenderId: \"660263202168\",\n  appId: \"1:660263202168:web:e8b584f4e75ae13385ac8d\"\n});\nexport const AuthContext = React.createContext();\n\nfunction AuthProvider({\n  children\n}) {\n  const [authState, setAuthState] = React.useState({\n    status: \"loading\"\n  });\n  const [createUser] = useMutation(CREATE_USER);\n  React.useEffect(() => {\n    firebase.auth().onAuthStateChanged(async user => {\n      if (user) {\n        const token = await user.getIdToken();\n        const idTokenResult = await user.getIdTokenResult();\n        const hasuraClaim = idTokenResult.claims[\"https://hasura.io/jwt/claims\"];\n\n        if (hasuraClaim) {\n          setAuthState({\n            status: \"in\",\n            user,\n            token\n          });\n        } else {\n          // Check if refresh is required.\n          const metadataRef = firebase.database().ref(\"metadata/\" + user.uid + \"/refreshTime\");\n          metadataRef.on(\"value\", async data => {\n            if (!data.exists) return; // Force refresh to pick up the latest custom claims changes.\n\n            const token = await user.getIdToken(true);\n            setAuthState({\n              status: \"in\",\n              user,\n              token\n            });\n          });\n        }\n      } else {\n        setAuthState({\n          status: \"out\"\n        });\n      }\n    });\n  }, []);\n\n  async function signInWithGoogle(formData) {\n    const data = await firebase.auth().signInWithPopup(provider);\n\n    if (data.additionalUserInfo.isNewUser) {\n      const {\n        uid,\n        displayName,\n        email,\n        photoURL\n      } = data.user;\n      const username = `${displayName.replace(/\\s+/g, \"\")}${uid.slice(-5)}`;\n      const variables = {\n        userId: data.user.uid,\n        name: displayName,\n        username,\n        email,\n        bio: \"\",\n        website: \"\",\n        phoneNumber: \"\",\n        profileImage: photoURL\n      };\n      await createUser({\n        variables\n      });\n    } else {\n      data = await firebase.auth().signInWithEmailAndPassword(formData.email, formData.password);\n      return data;\n    }\n  }\n\n  async function logInWithEmailAndPassword(email, password) {\n    const data = await firebase.auth().signInWithEmailAndPassword(email, password);\n    return data;\n  }\n\n  async function signUpWithEmailAndPassword(formData) {\n    const data = await firebase.auth().createUserWithEmailAndPassword(formData.email, formData.password);\n\n    if (data.additionalUserInfo.isNewUser) {\n      const variables = {\n        userId: data.user.uid,\n        name: formData.name,\n        username: formData.username,\n        email: data.user.email,\n        bio: \"\",\n        website: \"\",\n        phoneNumber: \"\",\n        profileImage: defaultUserImage\n      };\n      await createUser({\n        variables\n      });\n    }\n  }\n\n  async function signOut() {\n    setAuthState({\n      status: \"loading\"\n    });\n    await firebase.auth().signOut();\n    setAuthState({\n      status: \"out\"\n    });\n  }\n\n  async function updateEmail(email) {\n    await authState.user.updateEmail(email);\n  }\n\n  if (authState.status === \"loading\") {\n    return null;\n  } else {\n    return React.createElement(AuthContext.Provider, {\n      value: {\n        authState,\n        signInWithGoogle,\n        signOut,\n        signUpWithEmailAndPassword,\n        logInWithEmailAndPassword,\n        updateEmail\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, children);\n  }\n}\n\nexport default AuthProvider;","map":{"version":3,"sources":["/Users/johnnynguyen/instagram-clone/src/auth.js"],"names":["firebase","React","defaultUserImage","useMutation","CREATE_USER","provider","auth","GoogleAuthProvider","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","AuthContext","createContext","AuthProvider","children","authState","setAuthState","useState","status","createUser","useEffect","onAuthStateChanged","user","token","getIdToken","idTokenResult","getIdTokenResult","hasuraClaim","claims","metadataRef","database","ref","uid","on","data","exists","signInWithGoogle","formData","signInWithPopup","additionalUserInfo","isNewUser","displayName","email","photoURL","username","replace","slice","variables","userId","name","bio","website","phoneNumber","profileImage","signInWithEmailAndPassword","password","logInWithEmailAndPassword","signUpWithEmailAndPassword","createUserWithEmailAndPassword","signOut","updateEmail"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport React from \"react\";\nimport defaultUserImage from \"./images/default-user-image.jpg\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { CREATE_USER } from \"./graphql/mutations\";\n\nconst provider = new firebase.auth.GoogleAuthProvider();\n\n// Find these options in your Firebase console\nfirebase.initializeApp({\n  apiKey: \"AIzaSyCMW_qzquNAQxVRxO5_ERxqzb62OyIKfdk\",\n  authDomain: \"instagram-clone-588da.firebaseapp.com\",\n  databaseURL: \"https://instagram-clone-588da.firebaseio.com\",\n  projectId: \"instagram-clone-588da\",\n  storageBucket: \"instagram-clone-588da.appspot.com\",\n  messagingSenderId: \"660263202168\",\n  appId: \"1:660263202168:web:e8b584f4e75ae13385ac8d\"\n});\n\nexport const AuthContext = React.createContext();\n\nfunction AuthProvider({ children }) {\n  const [authState, setAuthState] = React.useState({ status: \"loading\" });\n  const [createUser] = useMutation(CREATE_USER);\n\n  React.useEffect(() => {\n    firebase.auth().onAuthStateChanged(async user => {\n      if (user) {\n        const token = await user.getIdToken();\n        const idTokenResult = await user.getIdTokenResult();\n        const hasuraClaim =\n          idTokenResult.claims[\"https://hasura.io/jwt/claims\"];\n\n        if (hasuraClaim) {\n          setAuthState({ status: \"in\", user, token });\n        } else {\n          // Check if refresh is required.\n          const metadataRef = firebase\n            .database()\n            .ref(\"metadata/\" + user.uid + \"/refreshTime\");\n\n          metadataRef.on(\"value\", async data => {\n            if (!data.exists) return;\n            // Force refresh to pick up the latest custom claims changes.\n            const token = await user.getIdToken(true);\n            setAuthState({ status: \"in\", user, token });\n          });\n        }\n      } else {\n        setAuthState({ status: \"out\" });\n      }\n    });\n  }, []);\n\n  async function signInWithGoogle(formData) {\n    const data = await firebase.auth().signInWithPopup(provider);\n    if (data.additionalUserInfo.isNewUser) {\n      const { uid, displayName, email, photoURL } = data.user;\n      const username = `${displayName.replace(/\\s+/g, \"\")}${uid.slice(-5)}`;\n      const variables = {\n        userId: data.user.uid,\n        name: displayName,\n        username,\n        email,\n        bio: \"\",\n        website: \"\",\n        phoneNumber: \"\",\n        profileImage: photoURL\n      };\n      await createUser({ variables });\n    } else {\n      data = await firebase\n        .auth()\n        .signInWithEmailAndPassword(formData.email, formData.password);\n      return data;\n    }\n  }\n\n  async function logInWithEmailAndPassword(email, password) {\n    const data = await firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password);\n    return data;\n  }\n\n  async function signUpWithEmailAndPassword(formData) {\n    const data = await firebase\n      .auth()\n      .createUserWithEmailAndPassword(formData.email, formData.password);\n    if (data.additionalUserInfo.isNewUser) {\n      const variables = {\n        userId: data.user.uid,\n        name: formData.name,\n        username: formData.username,\n        email: data.user.email,\n        bio: \"\",\n        website: \"\",\n        phoneNumber: \"\",\n        profileImage: defaultUserImage\n      };\n      await createUser({ variables });\n    }\n  }\n\n  async function signOut() {\n    setAuthState({ status: \"loading\" });\n    await firebase.auth().signOut();\n    setAuthState({ status: \"out\" });\n  }\n\n  async function updateEmail(email) {\n    await authState.user.updateEmail(email);\n  }\n\n  if (authState.status === \"loading\") {\n    return null;\n  } else {\n    return (\n      <AuthContext.Provider\n        value={{\n          authState,\n          signInWithGoogle,\n          signOut,\n          signUpWithEmailAndPassword,\n          logInWithEmailAndPassword,\n          updateEmail\n        }}\n      >\n        {children}\n      </AuthContext.Provider>\n    );\n  }\n}\n\nexport default AuthProvider;\n"]},"metadata":{},"sourceType":"module"}