{"ast":null,"code":"import { gql } from \"apollo-boost\";\nexport const CHECK_IF_USERNAME_TAKEN = gql`\n  query checkIfUsernameTaken($username: String!) {\n    users(where: { username: { _eq: $username } }) {\n      username\n    }\n  }\n`;\nexport const GET_USER_EMAIL = gql`\n  query getUserEmail($input: String!) {\n    users(\n      where: {\n        _or: [{ username: { _eq: $input } }, { phone_number: { _eq: $input } }]\n      }\n    ) {\n      email\n    }\n  }\n`;\nexport const GET_EDIT_USER_PROFILE = gql`\n  query getEditUserProfile($id: uuid!) {\n    users_by_pk(id: $id) {\n      id\n      username\n      name\n      email\n      bio\n      profile_image\n      website\n      phone_number\n    }\n  }\n`;\nexport const SEARCH_USERS = gql`\n  query searchUsers($query: String) {\n    users(\n      where: {\n        _or: [{ username: { _ilike: $query } }, { name: { _ilike: $query } }]\n      }\n    ) {\n      id\n      username\n      name\n      profile_image\n    }\n  }\n`;\nexport const GET_USER_PROFILE = gql`\n  query getUserProfile($username: String!) {\n    users(where: { username: { _eq: $username } }) {\n      id\n      name\n      username\n      website\n      bio\n      profile_image\n      posts_aggregate {\n        aggregate {\n          count\n        }\n      }\n      followers_aggregate {\n        aggregate {\n          count\n        }\n      }\n      following_aggregate {\n        aggregate {\n          count\n        }\n      }\n      saved_posts(order_by: { created_at: desc }) {\n        post {\n          id\n          media\n          likes_aggregate {\n            aggregate {\n              count\n            }\n          }\n          comments_aggregate {\n            aggregate {\n              count\n            }\n          }\n        }\n      }\n      posts(order_by: { created_at: desc }) {\n        id\n        media\n        likes_aggregate {\n          aggregate {\n            count\n          }\n        }\n        comments_aggregate {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n  }\n`; //suggest users from followers and users created around the same time\n\nexport const SUGGEST_USER = gql`\n  query suggestUsers(\n    $limit: Int!\n    $followerIds: [uuid!]!\n    $createdAt: timestamptz!\n  ) {\n    users(\n      limit: $limit\n      where: {\n        _or: [\n          { id: { _in: $followerIds } }\n          { created_at: { _gt: $createdAt } }\n        ]\n      }\n    ) {\n      id\n      username\n      name\n      profile_image\n    }\n  }\n`; // posts with the most likes and comments at the top, newest to oldest where posts are\n// from the users we are not following\n\nexport const EXPLORE_POSTS = gql`\n  query explorePosts($followingIds: [uuid!]!) {\n    posts(\n      order_by: {\n        created_at: desc\n        likes_aggregate: { count: desc }\n        comments_aggregate: { count: desc }\n      }\n      where: { id: { _nin: $followingIds } }\n    ) {\n      id\n      media\n      likes_aggregate {\n        aggregate {\n          count\n        }\n      }\n      comments_aggregate {\n        aggregate {\n          count\n        }\n      }\n    }\n  }\n`;\nexport const GET_MORE_POSTS_FROM_USER = gql`\n  query getMorePostsFromUser($userId: uuid!, $postId: uuid!) {\n    posts(\n      limit: 6\n      where: { user_id: { _eq: $userId }, _not: { id: { _eq: $postId } } }\n    ) {\n      id\n      media\n      likes_aggregate {\n        aggregate {\n          count\n        }\n      }\n      comments_aggregate {\n        aggregate {\n          count\n        }\n      }\n    }\n  }\n`;\nexport const GET_POST = gql`\n  query getPost($postId: uuid!) {\n    posts_by_pk(id: $postId) {\n      id\n      user {\n        id\n        username\n      }\n    }\n  }\n`;","map":{"version":3,"sources":["/Users/johnnynguyen/instagram-clone/src/graphql/queries.js"],"names":["gql","CHECK_IF_USERNAME_TAKEN","GET_USER_EMAIL","GET_EDIT_USER_PROFILE","SEARCH_USERS","GET_USER_PROFILE","SUGGEST_USER","EXPLORE_POSTS","GET_MORE_POSTS_FROM_USER","GET_POST"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AAEA,OAAO,MAAMC,uBAAuB,GAAGD,GAAI;;;;;;CAApC;AAQP,OAAO,MAAME,cAAc,GAAGF,GAAI;;;;;;;;;;CAA3B;AAYP,OAAO,MAAMG,qBAAqB,GAAGH,GAAI;;;;;;;;;;;;;CAAlC;AAeP,OAAO,MAAMI,YAAY,GAAGJ,GAAI;;;;;;;;;;;;;CAAzB;AAeP,OAAO,MAAMK,gBAAgB,GAAGL,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAA7B,C,CA0DP;;AACA,OAAO,MAAMM,YAAY,GAAGN,GAAI;;;;;;;;;;;;;;;;;;;;;CAAzB,C,CAuBP;AACA;;AACA,OAAO,MAAMO,aAAa,GAAGP,GAAI;;;;;;;;;;;;;;;;;;;;;;;;CAA1B;AA0BP,OAAO,MAAMQ,wBAAwB,GAAGR,GAAI;;;;;;;;;;;;;;;;;;;;CAArC;AAsBP,OAAO,MAAMS,QAAQ,GAAGT,GAAI;;;;;;;;;;CAArB","sourcesContent":["import { gql } from \"apollo-boost\";\n\nexport const CHECK_IF_USERNAME_TAKEN = gql`\n  query checkIfUsernameTaken($username: String!) {\n    users(where: { username: { _eq: $username } }) {\n      username\n    }\n  }\n`;\n\nexport const GET_USER_EMAIL = gql`\n  query getUserEmail($input: String!) {\n    users(\n      where: {\n        _or: [{ username: { _eq: $input } }, { phone_number: { _eq: $input } }]\n      }\n    ) {\n      email\n    }\n  }\n`;\n\nexport const GET_EDIT_USER_PROFILE = gql`\n  query getEditUserProfile($id: uuid!) {\n    users_by_pk(id: $id) {\n      id\n      username\n      name\n      email\n      bio\n      profile_image\n      website\n      phone_number\n    }\n  }\n`;\n\nexport const SEARCH_USERS = gql`\n  query searchUsers($query: String) {\n    users(\n      where: {\n        _or: [{ username: { _ilike: $query } }, { name: { _ilike: $query } }]\n      }\n    ) {\n      id\n      username\n      name\n      profile_image\n    }\n  }\n`;\n\nexport const GET_USER_PROFILE = gql`\n  query getUserProfile($username: String!) {\n    users(where: { username: { _eq: $username } }) {\n      id\n      name\n      username\n      website\n      bio\n      profile_image\n      posts_aggregate {\n        aggregate {\n          count\n        }\n      }\n      followers_aggregate {\n        aggregate {\n          count\n        }\n      }\n      following_aggregate {\n        aggregate {\n          count\n        }\n      }\n      saved_posts(order_by: { created_at: desc }) {\n        post {\n          id\n          media\n          likes_aggregate {\n            aggregate {\n              count\n            }\n          }\n          comments_aggregate {\n            aggregate {\n              count\n            }\n          }\n        }\n      }\n      posts(order_by: { created_at: desc }) {\n        id\n        media\n        likes_aggregate {\n          aggregate {\n            count\n          }\n        }\n        comments_aggregate {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n  }\n`;\n\n//suggest users from followers and users created around the same time\nexport const SUGGEST_USER = gql`\n  query suggestUsers(\n    $limit: Int!\n    $followerIds: [uuid!]!\n    $createdAt: timestamptz!\n  ) {\n    users(\n      limit: $limit\n      where: {\n        _or: [\n          { id: { _in: $followerIds } }\n          { created_at: { _gt: $createdAt } }\n        ]\n      }\n    ) {\n      id\n      username\n      name\n      profile_image\n    }\n  }\n`;\n\n// posts with the most likes and comments at the top, newest to oldest where posts are\n// from the users we are not following\nexport const EXPLORE_POSTS = gql`\n  query explorePosts($followingIds: [uuid!]!) {\n    posts(\n      order_by: {\n        created_at: desc\n        likes_aggregate: { count: desc }\n        comments_aggregate: { count: desc }\n      }\n      where: { id: { _nin: $followingIds } }\n    ) {\n      id\n      media\n      likes_aggregate {\n        aggregate {\n          count\n        }\n      }\n      comments_aggregate {\n        aggregate {\n          count\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_MORE_POSTS_FROM_USER = gql`\n  query getMorePostsFromUser($userId: uuid!, $postId: uuid!) {\n    posts(\n      limit: 6\n      where: { user_id: { _eq: $userId }, _not: { id: { _eq: $postId } } }\n    ) {\n      id\n      media\n      likes_aggregate {\n        aggregate {\n          count\n        }\n      }\n      comments_aggregate {\n        aggregate {\n          count\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_POST = gql`\n  query getPost($postId: uuid!) {\n    posts_by_pk(id: $postId) {\n      id\n      user {\n        id\n        username\n      }\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}