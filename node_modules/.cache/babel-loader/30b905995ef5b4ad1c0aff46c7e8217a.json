{"ast":null,"code":"var _jsxFileName = \"/Users/johnnynguyen/instagram-clone/src/auth.js\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport React from \"react\";\nconst provider = new firebase.auth.GoogleAuthProvider(); // Find these options in your Firebase console\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyCMW_qzquNAQxVRxO5_ERxqzb62OyIKfdk\",\n  authDomain: \"instagram-clone-588da.firebaseapp.com\",\n  databaseURL: \"https://instagram-clone-588da.firebaseio.com\",\n  projectId: \"instagram-clone-588da\",\n  storageBucket: \"instagram-clone-588da.appspot.com\",\n  messagingSenderId: \"660263202168\",\n  appId: \"1:660263202168:web:e8b584f4e75ae13385ac8d\"\n});\nexport const AuthContext = React.createContext();\n\nfunction AuthProvider({\n  children\n}) {\n  const [authState, setAuthState] = React.useState({\n    status: \"loading\"\n  });\n  React.useEffect(() => {\n    firebase.auth().onAuthStateChanged(async user => {\n      if (user) {\n        const token = await user.getIdToken();\n        const idTokenResult = await user.getIdTokenResult();\n        const hasuraClaim = idTokenResult.claims[\"https://hasura.io/jwt/claims\"];\n\n        if (hasuraClaim) {\n          setAuthState({\n            status: \"in\",\n            user,\n            token\n          });\n        } else {\n          // Check if refresh is required.\n          const metadataRef = firebase.database().ref(\"metadata/\" + user.uid + \"/refreshTime\");\n          metadataRef.on(\"value\", async data => {\n            if (!data.exists) return; // Force refresh to pick up the latest custom claims changes.\n\n            const token = await user.getIdToken(true);\n            setAuthState({\n              status: \"in\",\n              user,\n              token\n            });\n          });\n        }\n      } else {\n        setAuthState({\n          status: \"out\"\n        });\n      }\n    });\n  }, []);\n\n  async function signInWithGoogle() {\n    await firebase.auth().signInWithPopup(provider);\n  }\n\n  async function signOut() {\n    setAuthState({\n      status: \"loading\"\n    });\n    await firebase.auth().signOut();\n    setAuthState({\n      status: \"out\"\n    });\n  }\n\n  if (authState.status === \"loading\") {\n    return null;\n  } else {\n    return React.createElement(AuthContext.Provider, {\n      value: {\n        authState,\n        signInWithGoogle,\n        signOut\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, children);\n  }\n}\n\nexport default AuthProvider;","map":{"version":3,"sources":["/Users/johnnynguyen/instagram-clone/src/auth.js"],"names":["firebase","React","provider","auth","GoogleAuthProvider","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","AuthContext","createContext","AuthProvider","children","authState","setAuthState","useState","status","useEffect","onAuthStateChanged","user","token","getIdToken","idTokenResult","getIdTokenResult","hasuraClaim","claims","metadataRef","database","ref","uid","on","data","exists","signInWithGoogle","signInWithPopup","signOut"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport React from \"react\";\n\nconst provider = new firebase.auth.GoogleAuthProvider();\n\n// Find these options in your Firebase console\nfirebase.initializeApp({\n  apiKey: \"AIzaSyCMW_qzquNAQxVRxO5_ERxqzb62OyIKfdk\",\n  authDomain: \"instagram-clone-588da.firebaseapp.com\",\n  databaseURL: \"https://instagram-clone-588da.firebaseio.com\",\n  projectId: \"instagram-clone-588da\",\n  storageBucket: \"instagram-clone-588da.appspot.com\",\n  messagingSenderId: \"660263202168\",\n  appId: \"1:660263202168:web:e8b584f4e75ae13385ac8d\"\n});\n\nexport const AuthContext = React.createContext();\n\nfunction AuthProvider({ children }) {\n  const [authState, setAuthState] = React.useState({ status: \"loading\" });\n\n  React.useEffect(() => {\n    firebase.auth().onAuthStateChanged(async user => {\n      if (user) {\n        const token = await user.getIdToken();\n        const idTokenResult = await user.getIdTokenResult();\n        const hasuraClaim =\n          idTokenResult.claims[\"https://hasura.io/jwt/claims\"];\n\n        if (hasuraClaim) {\n          setAuthState({ status: \"in\", user, token });\n        } else {\n          // Check if refresh is required.\n          const metadataRef = firebase\n            .database()\n            .ref(\"metadata/\" + user.uid + \"/refreshTime\");\n\n          metadataRef.on(\"value\", async data => {\n            if (!data.exists) return;\n            // Force refresh to pick up the latest custom claims changes.\n            const token = await user.getIdToken(true);\n            setAuthState({ status: \"in\", user, token });\n          });\n        }\n      } else {\n        setAuthState({ status: \"out\" });\n      }\n    });\n  }, []);\n\n  async function signInWithGoogle() {\n    await firebase.auth().signInWithPopup(provider);\n  }\n\n  async function signOut() {\n    setAuthState({ status: \"loading\" });\n    await firebase.auth().signOut();\n    setAuthState({ status: \"out\" });\n  }\n\n  if (authState.status === \"loading\") {\n    return null;\n  } else {\n    return (\n      <AuthContext.Provider\n        value={{\n          authState,\n          signInWithGoogle,\n          signOut\n        }}\n      >\n        {children}\n      </AuthContext.Provider>\n    );\n  }\n}\n\nexport default AuthProvider;\n"]},"metadata":{},"sourceType":"module"}