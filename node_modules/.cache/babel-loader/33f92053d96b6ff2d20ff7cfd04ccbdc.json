{"ast":null,"code":"var _jsxFileName = \"/Users/johnnynguyen/instagram-clone/src/components/post/AddPostDialog.js\";\nimport React from \"react\";\nimport { createEditor } from \"slate\";\nimport { Slate, Editable, withReact } from \"slate-react\";\nimport { useAddPostDialogStyles } from \"../../styles\";\nimport { Dialog, AppBar, Toolbar, Typography, Button, Divider, Paper, Avatar, TextField, InputAdornment } from \"@material-ui/core\";\nimport { ArrowBackIos, PinDrop } from \"@material-ui/icons\";\nimport { UserContext } from \"../../App\";\nimport serialize from \"../../utils/serialize\";\nimport handleImageUpload from \"../../utils/handleImageUpload\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { CREATE_POST } from \"../../graphql/mutations\";\nconst initialValue = [{\n  type: \"paragraph\",\n  children: [{\n    text: \"\"\n  }]\n}];\n\nfunction AddPostDialog({\n  media,\n  handleClose\n}) {\n  const classes = useAddPostDialogStyles();\n  const {\n    me,\n    currentUserId\n  } = React.useContext(UserContext);\n  const editor = React.useMemo(() => withReact(createEditor()), []);\n  const [value, setValue] = React.useState(initialValue);\n  const [location, setLocation] = React.useState(\"\");\n  const [submitting, setSubmitting] = React.useState(false);\n  const [createPost] = useMutation(CREATE_POST);\n\n  async function handleSharePost() {\n    setSubmitting(true);\n    const url = await handleImageUpload(media);\n    const variables = {\n      userId: currentUserId,\n      location,\n      caption: serialize({\n        children: value\n      }),\n      media: url\n    };\n    await createPost({\n      variables\n    });\n    setSubmitting(false);\n    window.location.reload();\n  }\n\n  return React.createElement(Dialog, {\n    fullScreen: true,\n    open: true,\n    onClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(AppBar, {\n    className: classes.appBar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    className: classes.toolbar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(ArrowBackIos, {\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    align: \"center\",\n    variant: \"body1\",\n    className: classes.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"New Post\"), React.createElement(Button, {\n    color: \"primary\",\n    className: classes.share,\n    disabled: submitting,\n    onClick: handleSharePost,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Share\"))), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(Paper, {\n    className: classes.paper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Avatar, {\n    src: me.profile_image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(Editable, {\n    className: classes.editor,\n    placeholder: \"Write your caption...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  })), React.createElement(Avatar, {\n    src: URL.createObjectURL(media),\n    className: classes.avatarLarge,\n    variant: \"square\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  })), React.createElement(TextField, {\n    fullWidth: true,\n    placeholder: \"Location\",\n    InputProps: {\n      classes: {\n        root: classes.root,\n        input: classes.input,\n        underline: classes.underline\n      },\n      startAdornment: React.createElement(InputAdornment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(PinDrop, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }))\n    },\n    onChange: event => setLocation(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }));\n}\n\nexport default AddPostDialog;","map":{"version":3,"sources":["/Users/johnnynguyen/instagram-clone/src/components/post/AddPostDialog.js"],"names":["React","createEditor","Slate","Editable","withReact","useAddPostDialogStyles","Dialog","AppBar","Toolbar","Typography","Button","Divider","Paper","Avatar","TextField","InputAdornment","ArrowBackIos","PinDrop","UserContext","serialize","handleImageUpload","useMutation","CREATE_POST","initialValue","type","children","text","AddPostDialog","media","handleClose","classes","me","currentUserId","useContext","editor","useMemo","value","setValue","useState","location","setLocation","submitting","setSubmitting","createPost","handleSharePost","url","variables","userId","caption","window","reload","appBar","toolbar","title","share","paper","profile_image","URL","createObjectURL","avatarLarge","root","input","underline","startAdornment","event","target"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { createEditor } from \"slate\";\nimport { Slate, Editable, withReact } from \"slate-react\";\nimport { useAddPostDialogStyles } from \"../../styles\";\nimport {\n  Dialog,\n  AppBar,\n  Toolbar,\n  Typography,\n  Button,\n  Divider,\n  Paper,\n  Avatar,\n  TextField,\n  InputAdornment\n} from \"@material-ui/core\";\nimport { ArrowBackIos, PinDrop } from \"@material-ui/icons\";\nimport { UserContext } from \"../../App\";\nimport serialize from \"../../utils/serialize\";\nimport handleImageUpload from \"../../utils/handleImageUpload\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { CREATE_POST } from \"../../graphql/mutations\";\n\nconst initialValue = [\n  {\n    type: \"paragraph\",\n    children: [{ text: \"\" }]\n  }\n];\n\nfunction AddPostDialog({ media, handleClose }) {\n  const classes = useAddPostDialogStyles();\n  const { me, currentUserId } = React.useContext(UserContext);\n  const editor = React.useMemo(() => withReact(createEditor()), []);\n  const [value, setValue] = React.useState(initialValue);\n  const [location, setLocation] = React.useState(\"\");\n  const [submitting, setSubmitting] = React.useState(false);\n  const [createPost] = useMutation(CREATE_POST);\n\n  async function handleSharePost() {\n    setSubmitting(true);\n    const url = await handleImageUpload(media);\n    const variables = {\n      userId: currentUserId,\n      location,\n      caption: serialize({ children: value }),\n      media: url\n    };\n    await createPost({ variables });\n    setSubmitting(false);\n    window.location.reload();\n  }\n\n  return (\n    <Dialog fullScreen open onClose={handleClose}>\n      <AppBar className={classes.appBar}>\n        <Toolbar className={classes.toolbar}>\n          <ArrowBackIos onClick={handleClose} />\n          <Typography align=\"center\" variant=\"body1\" className={classes.title}>\n            New Post\n          </Typography>\n          <Button\n            color=\"primary\"\n            className={classes.share}\n            disabled={submitting}\n            onClick={handleSharePost}\n          >\n            Share\n          </Button>\n        </Toolbar>\n      </AppBar>\n      <Divider />\n      <Paper className={classes.paper}>\n        <Avatar src={me.profile_image} />\n        <Slate\n          editor={editor}\n          value={value}\n          onChange={value => setValue(value)}\n        >\n          <Editable\n            className={classes.editor}\n            placeholder=\"Write your caption...\"\n          />\n        </Slate>\n        <Avatar\n          src={URL.createObjectURL(media)}\n          className={classes.avatarLarge}\n          variant=\"square\"\n        />\n      </Paper>\n      <TextField\n        fullWidth\n        placeholder=\"Location\"\n        InputProps={{\n          classes: {\n            root: classes.root,\n            input: classes.input,\n            underline: classes.underline\n          },\n          startAdornment: (\n            <InputAdornment>\n              <PinDrop />\n            </InputAdornment>\n          )\n        }}\n        onChange={event => setLocation(event.target.value)}\n      />\n    </Dialog>\n  );\n}\n\nexport default AddPostDialog;\n"]},"metadata":{},"sourceType":"module"}