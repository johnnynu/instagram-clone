{"ast":null,"code":"var _jsxFileName = \"/Users/johnnynguyen/instagram-clone/src/pages/feed.js\";\nimport React from \"react\";\nimport { useFeedPageStyles } from \"../styles\";\nimport Layout from \"../components/shared/Layout\";\nimport UserCard from \"../components/shared/UserCard\"; // import FeedPost from \"../components/feed/FeedPost\";\n\nimport FeedSideSuggestions from \"../components/feed/FeedSideSuggestions\";\nimport { getDefaultPost } from \"../data\";\nimport { Hidden } from \"@material-ui/core\";\nimport LoadingScreen from \"../components/shared/LoadingScreen\";\nimport { LoadingLargeIcon } from \"../icons\";\nimport FeedPostSkeleton from \"../components/feed/FeedPostSkeleton\";\nimport Zuck from \"zuck.js\";\nconst FeedPost = React.lazy(() => import(\"../components/feed/FeedPost\"));\n\nfunction FeedPage() {\n  const classes = useFeedPageStyles();\n  const [isEndOfFeed] = React.useState(false); // let stories = new Zuck(\n  //   {\n  //     id: \"\", // story id\n  //     photo: \"\", // story photo (or user photo)\n  //     name: \"\", // story name (or user name)\n  //     link: \"\", // story link (useless on story generated by script)\n  //     lastUpdated: \"\", // last updated date in unix time format\n  //     seen: false\n  //   },\n  //   {\n  //     skin: \"snapgram\", // container class\n  //     avatars: true, // shows user photo instead of last story item preview\n  //     list: false, // displays a timeline instead of carousel\n  //     openEffect: true, // enables effect when opening story\n  //     cubeEffect: false, // enables the 3d cube effect when sliding story\n  //     autoFullScreen: false, // enables fullscreen on mobile browsers\n  //     backButton: true, // adds a back button to close the story viewer\n  //     backNative: false, // uses window history to enable back button on browsers/android\n  //     previousTap: true, // use 1/3 of the screen to navigate to previous item when tap the story\n  //     localStorage: true, // set true to save \"seen\" position. Element must have a id to save properly.\n  //     reactive: true, // set true if you use frameworks like React to control the timeline (see react.sample.html)\n  //     rtl: false, // enable/disable RTL\n  //     stories: [\n  //       // array of stories\n  //       // see stories structure example\n  //     ],\n  //     callbacks: {\n  //       onOpen(storyId, callback) {\n  //         callback(); // on open story viewer\n  //       },\n  //       onView(storyId) {\n  //         // on view story\n  //       },\n  //       onEnd(storyId, callback) {\n  //         callback(); // on end story\n  //       },\n  //       onClose(storyId, callback) {\n  //         callback(); // on close story viewer\n  //       },\n  //       onNavigateItem(storyId, nextStoryId, callback) {\n  //         callback(); // on navigate item of story\n  //       },\n  //       onDataUpdate(currentState, callback) {\n  //         callback(); // use to update state on your reactive framework\n  //       }\n  //     },\n  //     template: {\n  //       // use these functions to render custom templates\n  //       // see src/zuck.js for more details\n  //       timelineItem(itemData) {\n  //         return ``;\n  //       },\n  //       timelineStoryItem(itemData) {\n  //         return ``;\n  //       },\n  //       viewerItem(storyData, currentStoryItem) {\n  //         return ``;\n  //       },\n  //       viewerItemPointer(index, currentIndex, item) {\n  //         return ``;\n  //       },\n  //       viewerItemBody(index, currentIndex, item) {\n  //         return ``;\n  //       }\n  //     },\n  //     language: {\n  //       // if you need to translate :)\n  //       unmute: \"Touch to unmute\",\n  //       keyboardTip: \"Press space to see next\",\n  //       visitLink: \"Visit link\",\n  //       time: {\n  //         ago: \"ago\",\n  //         hour: \"hour\",\n  //         hours: \"hours\",\n  //         minute: \"minute\",\n  //         minutes: \"minutes\",\n  //         fromnow: \"from now\",\n  //         seconds: \"seconds\",\n  //         yesterday: \"yesterday\",\n  //         tomorrow: \"tomorrow\",\n  //         days: \"days\"\n  //       }\n  //     }\n  //   }\n  // );\n\n  let loading = false;\n  if (loading) return React.createElement(LoadingScreen, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  });\n  return React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, Array.from({\n    length: 5\n  }, () => getDefaultPost()).map((post, idx) => React.createElement(React.Suspense, {\n    key: post.id,\n    fallback: React.createElement(FeedPostSkeleton, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(FeedPost, {\n    idx: idx,\n    post: post,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  })))), React.createElement(Hidden, {\n    smDown: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.sidebarContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.sidebarWrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(UserCard, {\n    avatarSize: 50,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }), React.createElement(FeedSideSuggestions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  })))), !isEndOfFeed && React.createElement(LoadingLargeIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  })));\n}\n\nexport default FeedPage;","map":{"version":3,"sources":["/Users/johnnynguyen/instagram-clone/src/pages/feed.js"],"names":["React","useFeedPageStyles","Layout","UserCard","FeedSideSuggestions","getDefaultPost","Hidden","LoadingScreen","LoadingLargeIcon","FeedPostSkeleton","Zuck","FeedPost","lazy","FeedPage","classes","isEndOfFeed","useState","loading","container","Array","from","length","map","post","idx","id","sidebarContainer","sidebarWrapper"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useFeedPageStyles } from \"../styles\";\nimport Layout from \"../components/shared/Layout\";\nimport UserCard from \"../components/shared/UserCard\";\n// import FeedPost from \"../components/feed/FeedPost\";\nimport FeedSideSuggestions from \"../components/feed/FeedSideSuggestions\";\nimport { getDefaultPost } from \"../data\";\nimport { Hidden } from \"@material-ui/core\";\nimport LoadingScreen from \"../components/shared/LoadingScreen\";\nimport { LoadingLargeIcon } from \"../icons\";\nimport FeedPostSkeleton from \"../components/feed/FeedPostSkeleton\";\nimport Zuck from \"zuck.js\";\nconst FeedPost = React.lazy(() => import(\"../components/feed/FeedPost\"));\n\nfunction FeedPage() {\n  const classes = useFeedPageStyles();\n  const [isEndOfFeed] = React.useState(false);\n\n  // let stories = new Zuck(\n  //   {\n  //     id: \"\", // story id\n  //     photo: \"\", // story photo (or user photo)\n  //     name: \"\", // story name (or user name)\n  //     link: \"\", // story link (useless on story generated by script)\n  //     lastUpdated: \"\", // last updated date in unix time format\n  //     seen: false\n  //   },\n  //   {\n  //     skin: \"snapgram\", // container class\n  //     avatars: true, // shows user photo instead of last story item preview\n  //     list: false, // displays a timeline instead of carousel\n  //     openEffect: true, // enables effect when opening story\n  //     cubeEffect: false, // enables the 3d cube effect when sliding story\n  //     autoFullScreen: false, // enables fullscreen on mobile browsers\n  //     backButton: true, // adds a back button to close the story viewer\n  //     backNative: false, // uses window history to enable back button on browsers/android\n  //     previousTap: true, // use 1/3 of the screen to navigate to previous item when tap the story\n  //     localStorage: true, // set true to save \"seen\" position. Element must have a id to save properly.\n  //     reactive: true, // set true if you use frameworks like React to control the timeline (see react.sample.html)\n  //     rtl: false, // enable/disable RTL\n\n  //     stories: [\n  //       // array of stories\n  //       // see stories structure example\n  //     ],\n\n  //     callbacks: {\n  //       onOpen(storyId, callback) {\n  //         callback(); // on open story viewer\n  //       },\n\n  //       onView(storyId) {\n  //         // on view story\n  //       },\n\n  //       onEnd(storyId, callback) {\n  //         callback(); // on end story\n  //       },\n\n  //       onClose(storyId, callback) {\n  //         callback(); // on close story viewer\n  //       },\n\n  //       onNavigateItem(storyId, nextStoryId, callback) {\n  //         callback(); // on navigate item of story\n  //       },\n\n  //       onDataUpdate(currentState, callback) {\n  //         callback(); // use to update state on your reactive framework\n  //       }\n  //     },\n\n  //     template: {\n  //       // use these functions to render custom templates\n  //       // see src/zuck.js for more details\n\n  //       timelineItem(itemData) {\n  //         return ``;\n  //       },\n\n  //       timelineStoryItem(itemData) {\n  //         return ``;\n  //       },\n\n  //       viewerItem(storyData, currentStoryItem) {\n  //         return ``;\n  //       },\n\n  //       viewerItemPointer(index, currentIndex, item) {\n  //         return ``;\n  //       },\n\n  //       viewerItemBody(index, currentIndex, item) {\n  //         return ``;\n  //       }\n  //     },\n\n  //     language: {\n  //       // if you need to translate :)\n  //       unmute: \"Touch to unmute\",\n  //       keyboardTip: \"Press space to see next\",\n  //       visitLink: \"Visit link\",\n  //       time: {\n  //         ago: \"ago\",\n  //         hour: \"hour\",\n  //         hours: \"hours\",\n  //         minute: \"minute\",\n  //         minutes: \"minutes\",\n  //         fromnow: \"from now\",\n  //         seconds: \"seconds\",\n  //         yesterday: \"yesterday\",\n  //         tomorrow: \"tomorrow\",\n  //         days: \"days\"\n  //       }\n  //     }\n  //   }\n  // );\n\n  let loading = false;\n  if (loading) return <LoadingScreen />;\n\n  return (\n    <Layout>\n      <div className={classes.container}>\n        {/* Feed Posts */}\n        <div>\n          {Array.from({ length: 5 }, () => getDefaultPost()).map(\n            (post, idx) => (\n              <React.Suspense key={post.id} fallback={<FeedPostSkeleton />}>\n                <FeedPost idx={idx} post={post} />\n              </React.Suspense>\n            )\n          )}\n        </div>\n        {/* Sidebar */}\n        <Hidden smDown>\n          <div className={classes.sidebarContainer}>\n            <div className={classes.sidebarWrapper}>\n              <UserCard avatarSize={50} />\n              <FeedSideSuggestions />\n            </div>\n          </div>\n        </Hidden>\n        {!isEndOfFeed && <LoadingLargeIcon />}\n      </div>\n    </Layout>\n  );\n}\n\nexport default FeedPage;\n"]},"metadata":{},"sourceType":"module"}