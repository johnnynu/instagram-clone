{"ast":null,"code":"import { gql } from \"apollo-boost\";\nimport { userFields, gridPostFields } from \"./fragments\";\nexport const CHECK_IF_USERNAME_TAKEN = gql`\n  query checkIfUsernameTaken($username: String!) {\n    users(where: { username: { _eq: $username } }) {\n      username\n    }\n  }\n`;\nexport const GET_USER_EMAIL = gql`\n  query getUserEmail($input: String!) {\n    users(\n      where: {\n        _or: [{ username: { _eq: $input } }, { phone_number: { _eq: $input } }]\n      }\n    ) {\n      email\n    }\n  }\n`;\nexport const GET_EDIT_USER_PROFILE = gql`\n  query getEditUserProfile($id: uuid!) {\n    users_by_pk(id: $id) {\n      id\n      username\n      name\n      email\n      bio\n      profile_image\n      website\n      phone_number\n    }\n  }\n`;\nexport const SEARCH_USERS = gql`\n  query searchUsers($query: String) {\n    users(\n      where: {\n        _or: [{ username: { _ilike: $query } }, { name: { _ilike: $query } }]\n      }\n    ) {\n      ...userFields\n    }\n  }\n  ${userFields}\n`;\nexport const GET_USER_PROFILE = gql`\n  query getUserProfile($username: String!) {\n    users(where: { username: { _eq: $username } }) {\n      id\n      name\n      username\n      website\n      bio\n      profile_image\n      posts_aggregate {\n        aggregate {\n          count\n        }\n      }\n      followers_aggregate {\n        aggregate {\n          count\n        }\n      }\n      following_aggregate {\n        aggregate {\n          count\n        }\n      }\n      saved_posts(order_by: { created_at: desc }) {\n        post {\n          ...gridPostFields\n        }\n      }\n      posts(order_by: { created_at: desc }) {\n        ...gridPostFields\n      }\n    }\n  }\n  ${gridPostFields}\n`; // suggest users from followers and also users created around the same time\n\nexport const SUGGEST_USERS = gql`\n  query suggestUsers(\n    $limit: Int!\n    $followerIds: [uuid!]!\n    $createdAt: timestamptz!\n  ) {\n    users(\n      limit: $limit\n      where: {\n        _or: [\n          { id: { _in: $followerIds } }\n          { created_at: { _gt: $createdAt } }\n        ]\n      }\n    ) {\n      ...userFields\n    }\n  }\n  ${userFields}\n`; // posts with the most likes and comments at the top, newest to oldest where the posts are not from users we are following\n\nexport const EXPLORE_POSTS = gql`\n  query explorePosts($feedIds: [uuid!]!) {\n    posts(\n      order_by: {\n        created_at: desc\n        likes_aggregate: { count: desc }\n        comments_aggregate: { count: desc }\n      }\n      where: { user_id: { _nin: $feedIds } }\n    ) {\n      ...gridPostFields\n    }\n  }\n  ${gridPostFields}\n`;\nexport const GET_MORE_POSTS_FROM_USER = gql`\n  query getMorePostsFromUser($userId: uuid!, $postId: uuid!) {\n    posts(\n      limit: 6\n      where: { user_id: { _eq: $userId }, _not: { id: { _eq: $postId } } }\n    ) {\n      ...gridPostFields\n    }\n  }\n  ${gridPostFields}\n`;\nexport const GET_POST = gql`\n  query getPost($postId: uuid!) {\n    posts_by_pk(id: $postId) {\n      id\n      user {\n        id\n        username\n      }\n    }\n  }\n`;\nexport const GET_FEED = gql`\n  query getFeed($limit: Int!, $feedIds: [uuid!]!, $lastTimestamp: timestamptz) {\n    posts(\n      limit: $limit\n      where: { user_id: { _in: $feedIds }, created_at: { _lt: $lastTimestamp } }\n      order_by: { created_at: desc }\n    ) {\n      id\n      caption\n      created_at\n      media\n      location\n      user {\n        id\n        username\n        name\n        profile_image\n      }\n      likes_aggregate {\n        aggregate {\n          count\n        }\n      }\n      likes {\n        id\n        user_id\n      }\n      saved_posts {\n        id\n        user_id\n      }\n      comments_aggregate {\n        aggregate {\n          count\n        }\n      }\n      comments(order_by: { created_at: desc }, limit: 2) {\n        id\n        content\n        created_at\n        user {\n          username\n        }\n      }\n    }\n  }\n`;","map":{"version":3,"sources":["/Users/johnnynguyen/instagram-clone/src/graphql/queries.js"],"names":["gql","userFields","gridPostFields","CHECK_IF_USERNAME_TAKEN","GET_USER_EMAIL","GET_EDIT_USER_PROFILE","SEARCH_USERS","GET_USER_PROFILE","SUGGEST_USERS","EXPLORE_POSTS","GET_MORE_POSTS_FROM_USER","GET_POST","GET_FEED"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,aAA3C;AAEA,OAAO,MAAMC,uBAAuB,GAAGH,GAAI;;;;;;CAApC;AAQP,OAAO,MAAMI,cAAc,GAAGJ,GAAI;;;;;;;;;;CAA3B;AAYP,OAAO,MAAMK,qBAAqB,GAAGL,GAAI;;;;;;;;;;;;;CAAlC;AAeP,OAAO,MAAMM,YAAY,GAAGN,GAAI;;;;;;;;;;IAU5BC,UAAW;CAVR;AAaP,OAAO,MAAMM,gBAAgB,GAAGP,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkChCE,cAAe;CAlCZ,C,CAqCP;;AACA,OAAO,MAAMM,aAAa,GAAGR,GAAI;;;;;;;;;;;;;;;;;;IAkB7BC,UAAW;CAlBR,C,CAqBP;;AACA,OAAO,MAAMQ,aAAa,GAAGT,GAAI;;;;;;;;;;;;;IAa7BE,cAAe;CAbZ;AAgBP,OAAO,MAAMQ,wBAAwB,GAAGV,GAAI;;;;;;;;;IASxCE,cAAe;CATZ;AAYP,OAAO,MAAMS,QAAQ,GAAGX,GAAI;;;;;;;;;;CAArB;AAYP,OAAO,MAAMY,QAAQ,GAAGZ,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAArB","sourcesContent":["import { gql } from \"apollo-boost\";\nimport { userFields, gridPostFields } from \"./fragments\";\n\nexport const CHECK_IF_USERNAME_TAKEN = gql`\n  query checkIfUsernameTaken($username: String!) {\n    users(where: { username: { _eq: $username } }) {\n      username\n    }\n  }\n`;\n\nexport const GET_USER_EMAIL = gql`\n  query getUserEmail($input: String!) {\n    users(\n      where: {\n        _or: [{ username: { _eq: $input } }, { phone_number: { _eq: $input } }]\n      }\n    ) {\n      email\n    }\n  }\n`;\n\nexport const GET_EDIT_USER_PROFILE = gql`\n  query getEditUserProfile($id: uuid!) {\n    users_by_pk(id: $id) {\n      id\n      username\n      name\n      email\n      bio\n      profile_image\n      website\n      phone_number\n    }\n  }\n`;\n\nexport const SEARCH_USERS = gql`\n  query searchUsers($query: String) {\n    users(\n      where: {\n        _or: [{ username: { _ilike: $query } }, { name: { _ilike: $query } }]\n      }\n    ) {\n      ...userFields\n    }\n  }\n  ${userFields}\n`;\n\nexport const GET_USER_PROFILE = gql`\n  query getUserProfile($username: String!) {\n    users(where: { username: { _eq: $username } }) {\n      id\n      name\n      username\n      website\n      bio\n      profile_image\n      posts_aggregate {\n        aggregate {\n          count\n        }\n      }\n      followers_aggregate {\n        aggregate {\n          count\n        }\n      }\n      following_aggregate {\n        aggregate {\n          count\n        }\n      }\n      saved_posts(order_by: { created_at: desc }) {\n        post {\n          ...gridPostFields\n        }\n      }\n      posts(order_by: { created_at: desc }) {\n        ...gridPostFields\n      }\n    }\n  }\n  ${gridPostFields}\n`;\n\n// suggest users from followers and also users created around the same time\nexport const SUGGEST_USERS = gql`\n  query suggestUsers(\n    $limit: Int!\n    $followerIds: [uuid!]!\n    $createdAt: timestamptz!\n  ) {\n    users(\n      limit: $limit\n      where: {\n        _or: [\n          { id: { _in: $followerIds } }\n          { created_at: { _gt: $createdAt } }\n        ]\n      }\n    ) {\n      ...userFields\n    }\n  }\n  ${userFields}\n`;\n\n// posts with the most likes and comments at the top, newest to oldest where the posts are not from users we are following\nexport const EXPLORE_POSTS = gql`\n  query explorePosts($feedIds: [uuid!]!) {\n    posts(\n      order_by: {\n        created_at: desc\n        likes_aggregate: { count: desc }\n        comments_aggregate: { count: desc }\n      }\n      where: { user_id: { _nin: $feedIds } }\n    ) {\n      ...gridPostFields\n    }\n  }\n  ${gridPostFields}\n`;\n\nexport const GET_MORE_POSTS_FROM_USER = gql`\n  query getMorePostsFromUser($userId: uuid!, $postId: uuid!) {\n    posts(\n      limit: 6\n      where: { user_id: { _eq: $userId }, _not: { id: { _eq: $postId } } }\n    ) {\n      ...gridPostFields\n    }\n  }\n  ${gridPostFields}\n`;\n\nexport const GET_POST = gql`\n  query getPost($postId: uuid!) {\n    posts_by_pk(id: $postId) {\n      id\n      user {\n        id\n        username\n      }\n    }\n  }\n`;\n\nexport const GET_FEED = gql`\n  query getFeed($limit: Int!, $feedIds: [uuid!]!, $lastTimestamp: timestamptz) {\n    posts(\n      limit: $limit\n      where: { user_id: { _in: $feedIds }, created_at: { _lt: $lastTimestamp } }\n      order_by: { created_at: desc }\n    ) {\n      id\n      caption\n      created_at\n      media\n      location\n      user {\n        id\n        username\n        name\n        profile_image\n      }\n      likes_aggregate {\n        aggregate {\n          count\n        }\n      }\n      likes {\n        id\n        user_id\n      }\n      saved_posts {\n        id\n        user_id\n      }\n      comments_aggregate {\n        aggregate {\n          count\n        }\n      }\n      comments(order_by: { created_at: desc }, limit: 2) {\n        id\n        content\n        created_at\n        user {\n          username\n        }\n      }\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}